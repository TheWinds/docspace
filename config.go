package mkdoc

import (
	"fmt"
	"github.com/go-yaml/yaml"
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

const configFileName = "conf.yaml"

type Inject struct {
	Name    string `yaml:"name"`
	Desc    string `yaml:"desc"`
	Default string `yaml:"default"`
	Scope   string `yaml:"scope"` // header,query,form
}

type MimeType struct {
	In  string `yaml:"in"`
	Out string `yaml:"out"`
}

type Config struct {
	Name          string            `yaml:"name"`
	Description   string            `yaml:"desc"`
	APIBaseURL    string            `yaml:"api_base_url"` // https://api.xxx.com
	Injects       []*Inject         `yaml:"inject"`       //
	Scanner       []string          `yaml:"scanner"`
	Generator     []string          `yaml:"generator"`
	Mime          *MimeType         `yaml:"mime"` // MimeType
	Args          map[string]string `yaml:"args"`
	scannerArgs   map[string]map[string]string
	generatorArgs map[string]map[string]string
}

func (c *Config) GetScannerArgs(name string) map[string]string {
	return c.scannerArgs[name]
}

func (c *Config) GetGeneratorArgs(name string) map[string]string {
	return c.generatorArgs[name]
}

func loadConfig(fileName string) (*Config, error) {
	path, err := os.Getwd()
	if err != nil {
		return nil, err
	}
	confFilePath := filepath.Join(path, fileName)
	b, err := ioutil.ReadFile(confFilePath)
	if err != nil {
		return nil, err
	}
	config := new(Config)
	err = yaml.Unmarshal(b, config)
	return mergeDefault(config), err
}

func mergeDefault(conf *Config) *Config {
	if conf == nil {
		return nil
	}
	if conf.Mime == nil {
		conf.Mime = &MimeType{"form", "json"}
	}
	return conf
}

func copysmap(src map[string]string) map[string]string {
	dst := make(map[string]string, len(src))
	for k, v := range src {
		dst[k] = v
	}
	return dst
}

func rewriteConfig(conf *Config) error {
	conf.scannerArgs = make(map[string]map[string]string)
	conf.generatorArgs = make(map[string]map[string]string)
	for k, s := range conf.Scanner {
		name, args, err := nameArgs(s)
		if err != nil {
			return err
		}
		conf.scannerArgs[name] = copysmap(conf.Args)
		conf.Scanner[k] = name
		for kk, vv := range args {
			conf.scannerArgs[name][kk] = vv
		}
	}
	for k, s := range conf.Generator {
		name, args, err := nameArgs(s)
		if err != nil {
			return err
		}
		conf.generatorArgs[name] = copysmap(conf.Args)
		conf.Generator[k] = name
		for kk, vv := range args {
			conf.generatorArgs[name][kk] = vv
		}
	}
	return nil
}

var reArgKV = regexp.MustCompile(`(\S+)=(\S*)`)

func nameArgs(s string) (string, map[string]string, error) {
	if strings.Index(s, ";") == -1 {
		return s, make(map[string]string), nil
	}
	items := strings.Split(s, ";")
	var name string
	kv := make(map[string]string)
	for i, item := range items {
		trimmed := strings.TrimSpace(item)
		if i == 0 {
			name = trimmed
			continue
		}
		matches := reArgKV.FindStringSubmatch(trimmed)
		if len(matches) != 3 {
			return "", nil, fmt.Errorf("fomat error: '%s'", s)
		}
		kv[matches[1]] = matches[2]
	}
	return name, kv, nil
}

func LoadDefaultConfig() (*Config, error) {
	conf, err := loadConfig(configFileName)
	if err != nil {
		return nil, err
	}
	err = rewriteConfig(conf)
	if err != nil {
		return nil, err
	}
	return conf, nil
}

func CreateDefaultConfig() error {
	path, err := os.Getwd()
	if err != nil {
		return err
	}
	confFilePath := filepath.Join(path, configFileName)
	if _, err := os.Stat(confFilePath); err == nil {
		return fmt.Errorf("config file alreadly exist")
	}
	cfg := &Config{
		Name:        "my doc",
		Description: "this doc is auto generated by [mkdoc](https://github.com/TheWinds/mkdoc)",
		APIBaseURL:  "http://",
		Mime: &MimeType{
			In:  "form",
			Out: "json",
		},
		Injects: []*Inject{
			{
				Name:    "",
				Desc:    "",
				Default: "",
				Scope:   "",
			},
		},
		Scanner:       []string{"gofunc;pkg=corego/service;enable_go_mod=false", "docdef;path=path/to/scan"},
		Generator:     []string{"markdown", "docsify"},
		Args:          map[string]string{"path": "path/to/your/project"},
		scannerArgs:   map[string]map[string]string{},
		generatorArgs: map[string]map[string]string{},
	}
	b, err := yaml.Marshal(cfg)
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(confFilePath, b, 0644)
	if err != nil {
		return err
	}
	// if exist ignore
	os.Mkdir(filepath.Join(path, "docs"), 0755)
	return nil
}
